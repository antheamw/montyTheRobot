//  square.c: Uses timer 2 interrupt to generate a square wave in pin
//  P2.0 and a 75% duty cycle wave in pin P2.1
//  Copyright (c) 2010-2015 Jesus Calvino-Fraga
//  ~C51~

#include <C8051F38x.h>
#include <stdlib.h>
#include <stdio.h>

#define SYSCLK    48000000L // SYSCLK frequency in Hz
#define BAUDRATE  115200L   // Baud rate of UART in bps

#define OUT0 P2_0
#define OUT1 P2_1
#define HIGH P1_4
#define SERVO180 P1_6
#define BASEMOTOR P1_5
#define LEFT0 P2_5
#define LEFT1 P2_4
#define RIGHT0 P2_7
#define RIGHT1 P2_6

volatile int gunmov = 0;
volatile unsigned char pwm_count=0;
volatile unsigned int num1;
volatile unsigned int num2;
volatile unsigned int motor;
volatile unsigned int num=19;
volatile unsigned int move=4;
char _c51_external_startup (void)
{
	PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
	VDM0CN=0x80; // enable VDD monitor
	RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD

	// CLKSEL&=0b_1111_1000; // Not needed because CLKSEL==0 after reset
	#if (SYSCLK == 12000000L)
		//CLKSEL|=0b_0000_0000;  // SYSCLK derived from the Internal High-Frequency Oscillator / 4 
	#elif (SYSCLK == 24000000L)
		CLKSEL|=0b_0000_0010; // SYSCLK derived from the Internal High-Frequency Oscillator / 2.
	#elif (SYSCLK == 48000000L)
		CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
	#else
		#error SYSCLK must be either 12000000L, 24000000L, or 48000000L
	#endif
	OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency

	// Configure UART0
	SCON0 = 0x10; 
#if (SYSCLK/BAUDRATE/2L/256L < 1)
	TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
	CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
	CKCON |=  0x08;
#elif (SYSCLK/BAUDRATE/2L/256L < 4)
	TH1 = 0x10000-(SYSCLK/BAUDRATE/2L/4L);
	CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 01                  
	CKCON |=  0x01;
#elif (SYSCLK/BAUDRATE/2L/256L < 12)
	TH1 = 0x10000-(SYSCLK/BAUDRATE/2L/12L);
	CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 00
#else
	TH1 = 0x10000-(SYSCLK/BAUDRATE/2/48);
	CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 10
	CKCON |=  0x02;
#endif
	TL1 = TH1;      // Init Timer1
	TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
	TMOD |=  0x20;                       
	TR1 = 1; // START Timer1
	TI = 1;  // Indicate TX0 ready
	
	// Configure the pins used for square output
	P2MDOUT|=0b_0000_0011;
	P1MDOUT |=0b_0111_0000;
	P0MDOUT |= 0x10; // Enable UTX as push-pull output
	XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)                     
	XBR1     = 0x40; // Enable crossbar and weak pull-ups

	// Initialize timer 2 for periodic interrupts
	TMR2CN=0x00;   // Stop Timer2; Clear TF2;
	CKCON|=0b_0001_0000;
	TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
	TMR2=0xffff;   // Set to reload immediately
	ET2=1;         // Enable Timer2 interrupts
	TR2=1;         // Start Timer2

	EA=1; // Enable interrupts
	
	return 0;
}


void Timer2_ISR (void) interrupt 5
{
	TF2H = 0; // Clear Timer2 interrupt flag
	
	pwm_count++;
	if(pwm_count>num) pwm_count=0;
//    SERVO180=pwm_count>num2?0:1;
	
//	OUT0=pwm_count>num1?0:1;
	if(motor==0){
	num=19;
	HIGH=pwm_count>4?0:1;
	}
	else if(motor==1){
	num=19;
	HIGH=pwm_count>15?0:1;
	}
	else if(motor==2){
	num=10;
	SERVO180=pwm_count>1?0:1;
	}	
	else if(motor==3){
	num=19;
	BASEMOTOR=pwm_count>17?0:1;
	}
	else if(motor==4){
	num=19;
	BASEMOTOR=pwm_count>6?0:1;
	}
	else if(motor==5){
	num=10;
	SERVO180=pwm_count>2?0:1;
	}
	else if(motor==6){
	num=10;
	SERVO180=pwm_count>3?0:1;
	}
	else if(motor==7){
	num=10;
	SERVO180=pwm_count>4?0:1;
	}
	else if(motor==8){
	num=10;
	SERVO180=pwm_count>5?0:1;
	}
	else if(motor==9){
	num=10;
	SERVO180=pwm_count>6?0:1;
	}
	else if(motor==10){
	num=10;
	SERVO180=pwm_count>7?0:1;
	}
	
	else if(motor==11){
	num=10;
	SERVO180=pwm_count>8?0:1;
	}

}

	//OUT0=1;
//	OUT1=1;


void main (void)
{
	
	
	printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
	printf("Square wave generator for the F38x.\r\n"
	       "Check pins P2.0 and P2.1 with the oscilloscope.\r\n");
	 
	HIGH=0;
	SERVO180=1;
	BASEMOTOR=0;
	motor=0;	
	while(1)
	{
	// printf("Please enter a number between 0 and 100.\n");
	 //scanf("%d", &num2);  
	 printf("MOTOR OPTION\n");
	  scanf("%d", &motor);  
	 printf("motor=%d", motor);
	 printf("MOVE OPTION\n");
	  scanf("%d", &move);  
	 printf("motor=%d", move);

	 	if (move==0){
		//move right back and left forward(turn right)
		RIGHT0=0;
		RIGHT1=1;
		LEFT0=1;
		LEFT1=0;

	}
	
	if (move==1){
		//move left back and right forward (turn left)
		RIGHT0=1;
		RIGHT1=0;
		LEFT0=0;
		LEFT1=1;
	}
	
	if (move==2){
		//move motor 1 and 2 forward
		RIGHT0=1;
		RIGHT1=0;
		LEFT0=1;
		LEFT1=0;

	}
	
	if (move==3){
		//move motor 2 and 1 backward
		RIGHT0=0;
		RIGHT1=1;
		LEFT0=0;
		LEFT1=1;

	}

	if (move==4){
		//off
		RIGHT0=0;
		RIGHT1=0;
		LEFT0=0;
		LEFT1=0;

	}
	}
}
